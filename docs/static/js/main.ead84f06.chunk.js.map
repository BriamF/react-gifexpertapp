{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,SACVP,GAAe,SAAAQ,GAAU,OAAMN,GAAN,mBAAqBM,OAC9CL,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAjBc,SAACN,GACvBF,EAAeE,EAAEO,OAAOF,QAiBhBG,YAAY,yB,+BC1BfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEII,MAAOF,GAFX,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCWLO,EATK,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAC/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCuCGO,EAvCC,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAWhB,ECdwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAAEpB,IAEEqB,EDF0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAKrB,OACI,qCACI,mCAAOpB,EAAP,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAkB,GAAK,OACb,cAAC,EAAD,eAESA,GADCA,EAAMhB,aEIzBiB,EA/BM,WAGjB,MAAoC1C,mBAAS,CAAC,YAA9C,mBAAOO,EAAP,KAAmBR,EAAnB,KAOA,OACK,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQQ,EAAWgB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAWA,GADLA,Y,MCjBlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ead84f06.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n    //Hooks\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Funciones\r\n    const handleInputChange = (e) => { \r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim()){\r\n            setCategories( categories => [ inputValue, ...categories ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n                placeholder=\"Type something...\"\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\n//Props\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=MNHa9OmN5Fioks2fShwiVbuHGrXVmjI5`;\r\n    const response = await fetch( url );\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifs;\r\n}\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ( { id, title, url } ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ( { category } ) => {\r\n    //Hooks\r\n    // const [images, setImages] = useState([])\r\n    // Los hooks de efecto ejecutan código de manera condicional, en este caso el segundo argumento\r\n    //  cuando esta vacío, solo se ejecutará una sola vez aunque se hagan cambios en el componente y se vuelva a renderizar.\r\n    // useEffect( () => {\r\n    //    getGifs( category )\r\n    //         .then( gifs => setImages( gifs ) );\r\n    // }, [ category ])\r\n\r\n    //CustomHooks\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n\r\n    //Functions\r\n    \r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            <div className='card-grid'>\r\n                { \r\n                    images.map( image => (\r\n                        <GifGridItem \r\n                            key={ image.id } \r\n                            { ...image }\r\n                        />\r\n                    )) \r\n                }   \r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n//Proptypes\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect} from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    }, [ category ])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n    // Esto no funciona para poder agregar nuevas categorías, por ello es necesario usar Hooks.\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball Z'];\r\n    const [categories, setCategories] = useState(['Pokemon'])\r\n    // Referencia, fines educativos\r\n    // const handleAdd = () => {\r\n    //     // Formas de agregar un nuevo elemento a un arreglo en un Hook de estado. \r\n    //     setCategories( [...categories, 'NuevaCategoria'] );\r\n    //     //setCategories( categories => [ ...categories, 'NuevaCategoria' ] );\r\n    // }\r\n    return (\r\n         <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        //<li key={ category }> { category } </li>\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// Tarea: Crear un componente llamado: GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr />\n"],"sourceRoot":""}